{"ast":null,"code":"var _jsxFileName = \"/Users/devulapellykushalkumarreddy/Downloads/CHALYATI/car-rental-frontend/src/components/Prism.js\",\n  _s = $RefreshSig$();\nimport { Mesh, Program, Renderer, Triangle } from \"ogl\";\nimport { useEffect, useRef } from \"react\";\nimport \"./Prism.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Prism = ({\n  height = 3.5,\n  baseWidth = 5.5,\n  animationType = \"rotate\",\n  glow = 1,\n  offset = {\n    x: 0,\n    y: 0\n  },\n  noise = 0.5,\n  transparent = true,\n  scale = 3.6,\n  hueShift = 0,\n  colorFrequency = 1,\n  hoverStrength = 2,\n  inertia = 0.05,\n  bloom = 1,\n  suspendWhenOffscreen = false,\n  timeScale = 0.5\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    var _offset$x, _offset$y;\n    const container = containerRef.current;\n    if (!container) return;\n    const H = Math.max(0.001, height);\n    const BW = Math.max(0.001, baseWidth);\n    const BASE_HALF = BW * 0.5;\n    const GLOW = Math.max(0.0, glow);\n    const NOISE = Math.max(0.0, noise);\n    const offX = (_offset$x = offset === null || offset === void 0 ? void 0 : offset.x) !== null && _offset$x !== void 0 ? _offset$x : 0;\n    const offY = (_offset$y = offset === null || offset === void 0 ? void 0 : offset.y) !== null && _offset$y !== void 0 ? _offset$y : 0;\n    const SAT = transparent ? 1.5 : 1;\n    const SCALE = Math.max(0.001, scale);\n    const HUE = hueShift || 0;\n    const CFREQ = Math.max(0.0, colorFrequency || 1);\n    const BLOOM = Math.max(0.0, bloom || 1);\n    const RSX = 1;\n    const RSY = 1;\n    const RSZ = 1;\n    const TS = Math.max(0, timeScale || 1);\n    const HOVSTR = Math.max(0, hoverStrength || 1);\n    const INERT = Math.max(0, Math.min(1, inertia || 0.12));\n    const dpr = Math.min(2, window.devicePixelRatio || 1);\n    const renderer = new Renderer({\n      dpr,\n      alpha: transparent,\n      antialias: false\n    });\n    const gl = renderer.gl;\n    gl.disable(gl.DEPTH_TEST);\n    gl.disable(gl.CULL_FACE);\n    gl.disable(gl.BLEND);\n    Object.assign(gl.canvas.style, {\n      position: \"absolute\",\n      inset: \"0\",\n      width: \"100%\",\n      height: \"100%\",\n      display: \"block\"\n    });\n    container.appendChild(gl.canvas);\n    const vertex = /* glsl */`\n      attribute vec2 position;\n      void main() {\n        gl_Position = vec4(position, 0.0, 1.0);\n      }\n    `;\n    const fragment = /* glsl */`\n      precision highp float;\n\n      uniform vec2  iResolution;\n      uniform float iTime;\n\n      uniform float uHeight;\n      uniform float uBaseHalf;\n      uniform mat3  uRot;\n      uniform int   uUseBaseWobble;\n      uniform float uGlow;\n      uniform vec2  uOffsetPx;\n      uniform float uNoise;\n      uniform float uSaturation;\n      uniform float uScale;\n      uniform float uHueShift;\n      uniform float uColorFreq;\n      uniform float uBloom;\n      uniform float uCenterShift;\n      uniform float uInvBaseHalf;\n      uniform float uInvHeight;\n      uniform float uMinAxis;\n      uniform float uPxScale;\n      uniform float uTimeScale;\n\n      vec4 tanh4(vec4 x){\n        vec4 e2x = exp(2.0*x);\n        return (e2x - 1.0) / (e2x + 1.0);\n      }\n\n      float rand(vec2 co){\n        return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453123);\n      }\n\n      float sdOctaAnisoInv(vec3 p){\n        vec3 q = vec3(abs(p.x) * uInvBaseHalf, abs(p.y) * uInvHeight, abs(p.z) * uInvBaseHalf);\n        float m = q.x + q.y + q.z - 1.0;\n        return m * uMinAxis * 0.5773502691896258;\n      }\n\n      float sdPyramidUpInv(vec3 p){\n        float oct = sdOctaAnisoInv(p);\n        float halfSpace = -p.y;\n        return max(oct, halfSpace);\n      }\n\n      mat3 hueRotation(float a){\n        float c = cos(a), s = sin(a);\n        mat3 W = mat3(\n          0.299, 0.587, 0.114,\n          0.299, 0.587, 0.114,\n          0.299, 0.587, 0.114\n        );\n        mat3 U = mat3(\n           0.701, -0.587, -0.114,\n          -0.299,  0.413, -0.114,\n          -0.300, -0.588,  0.886\n        );\n        mat3 V = mat3(\n           0.168, -0.331,  0.500,\n           0.328,  0.035, -0.500,\n          -0.497,  0.296,  0.201\n        );\n        return W + U * c + V * s;\n      }\n\n      void main(){\n        vec2 f = (gl_FragCoord.xy - 0.5 * iResolution.xy - uOffsetPx) * uPxScale;\n\n        float z = 5.0;\n        float d = 0.0;\n\n        vec3 p;\n        vec4 o = vec4(0.0);\n\n        float centerShift = uCenterShift;\n        float cf = uColorFreq;\n\n        mat2 wob = mat2(1.0);\n        if (uUseBaseWobble == 1) {\n          float t = iTime * uTimeScale;\n          float c0 = cos(t + 0.0);\n          float c1 = cos(t + 33.0);\n          float c2 = cos(t + 11.0);\n          wob = mat2(c0, c1, c2, c0);\n        }\n\n        const int STEPS = 100;\n        for (int i = 0; i < STEPS; i++) {\n          p = vec3(f, z);\n          p.xz = p.xz * wob;\n          p = uRot * p;\n          vec3 q = p;\n          q.y += centerShift;\n          d = 0.1 + 0.2 * abs(sdPyramidUpInv(q));\n          z -= d;\n          o += (sin((p.y + z) * cf + vec4(0.0, 1.0, 2.0, 3.0)) + 1.0) / d;\n        }\n\n        o = tanh4(o * o * (uGlow * uBloom) / 1e5);\n\n        vec3 col = o.rgb;\n        float n = rand(gl_FragCoord.xy + vec2(iTime));\n        col += (n - 0.5) * uNoise;\n        col = clamp(col, 0.0, 1.0);\n\n        float L = dot(col, vec3(0.2126, 0.7152, 0.0722));\n        col = clamp(mix(vec3(L), col, uSaturation), 0.0, 1.0);\n\n        if(abs(uHueShift) > 0.0001){\n          col = clamp(hueRotation(uHueShift) * col, 0.0, 1.0);\n        }\n\n        gl_FragColor = vec4(col, o.a);\n      }\n    `;\n    const geometry = new Triangle(gl);\n    const iResBuf = new Float32Array(2);\n    const offsetPxBuf = new Float32Array(2);\n    const program = new Program(gl, {\n      vertex,\n      fragment,\n      uniforms: {\n        iResolution: {\n          value: iResBuf\n        },\n        iTime: {\n          value: 0\n        },\n        uHeight: {\n          value: H\n        },\n        uBaseHalf: {\n          value: BASE_HALF\n        },\n        uUseBaseWobble: {\n          value: 1\n        },\n        uRot: {\n          value: new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1])\n        },\n        uGlow: {\n          value: GLOW\n        },\n        uOffsetPx: {\n          value: offsetPxBuf\n        },\n        uNoise: {\n          value: NOISE\n        },\n        uSaturation: {\n          value: SAT\n        },\n        uScale: {\n          value: SCALE\n        },\n        uHueShift: {\n          value: HUE\n        },\n        uColorFreq: {\n          value: CFREQ\n        },\n        uBloom: {\n          value: BLOOM\n        },\n        uCenterShift: {\n          value: H * 0.25\n        },\n        uInvBaseHalf: {\n          value: 1 / BASE_HALF\n        },\n        uInvHeight: {\n          value: 1 / H\n        },\n        uMinAxis: {\n          value: Math.min(BASE_HALF, H)\n        },\n        uPxScale: {\n          value: 1 / ((gl.drawingBufferHeight || 1) * 0.1 * SCALE)\n        },\n        uTimeScale: {\n          value: TS\n        }\n      }\n    });\n    const mesh = new Mesh(gl, {\n      geometry,\n      program\n    });\n    const resize = () => {\n      const w = container.clientWidth || 1;\n      const h = container.clientHeight || 1;\n      renderer.setSize(w, h);\n      iResBuf[0] = gl.drawingBufferWidth;\n      iResBuf[1] = gl.drawingBufferHeight;\n      offsetPxBuf[0] = offX * dpr;\n      offsetPxBuf[1] = offY * dpr;\n      program.uniforms.uPxScale.value = 1 / ((gl.drawingBufferHeight || 1) * 0.1 * SCALE);\n    };\n    const ro = new ResizeObserver(resize);\n    ro.observe(container);\n    resize();\n    const rotBuf = new Float32Array(9);\n    const setMat3FromEuler = (yawY, pitchX, rollZ, out) => {\n      const cy = Math.cos(yawY),\n        sy = Math.sin(yawY);\n      const cx = Math.cos(pitchX),\n        sx = Math.sin(pitchX);\n      const cz = Math.cos(rollZ),\n        sz = Math.sin(rollZ);\n      const r00 = cy * cz + sy * sx * sz;\n      const r01 = -cy * sz + sy * sx * cz;\n      const r02 = sy * cx;\n      const r10 = cx * sz;\n      const r11 = cx * cz;\n      const r12 = -sx;\n      const r20 = -sy * cz + cy * sx * sz;\n      const r21 = sy * sz + cy * sx * cz;\n      const r22 = cy * cx;\n      out[0] = r00;\n      out[1] = r10;\n      out[2] = r20;\n      out[3] = r01;\n      out[4] = r11;\n      out[5] = r21;\n      out[6] = r02;\n      out[7] = r12;\n      out[8] = r22;\n      return out;\n    };\n    const NOISE_IS_ZERO = NOISE < 1e-6;\n    let raf = 0;\n    const t0 = performance.now();\n    const startRAF = () => {\n      if (raf) return;\n      raf = requestAnimationFrame(render);\n    };\n    const stopRAF = () => {\n      if (!raf) return;\n      cancelAnimationFrame(raf);\n      raf = 0;\n    };\n    const rnd = () => Math.random();\n    const wX = (0.3 + rnd() * 0.6) * RSX;\n    const wY = (0.2 + rnd() * 0.7) * RSY;\n    const wZ = (0.1 + rnd() * 0.5) * RSZ;\n    const phX = rnd() * Math.PI * 2;\n    const phZ = rnd() * Math.PI * 2;\n    let yaw = 0,\n      pitch = 0,\n      roll = 0;\n    let targetYaw = 0,\n      targetPitch = 0;\n    const lerp = (a, b, t) => a + (b - a) * t;\n    const pointer = {\n      x: 0,\n      y: 0,\n      inside: true\n    };\n    const onMove = e => {\n      const ww = Math.max(1, window.innerWidth);\n      const wh = Math.max(1, window.innerHeight);\n      const cx = ww * 0.5;\n      const cy = wh * 0.5;\n      const nx = (e.clientX - cx) / (ww * 0.5);\n      const ny = (e.clientY - cy) / (wh * 0.5);\n      pointer.x = Math.max(-1, Math.min(1, nx));\n      pointer.y = Math.max(-1, Math.min(1, ny));\n      pointer.inside = true;\n    };\n    const onLeave = () => {\n      pointer.inside = false;\n    };\n    const onBlur = () => {\n      pointer.inside = false;\n    };\n    let onPointerMove = null;\n    if (animationType === \"hover\") {\n      onPointerMove = e => {\n        onMove(e);\n        startRAF();\n      };\n      window.addEventListener(\"pointermove\", onPointerMove, {\n        passive: true\n      });\n      window.addEventListener(\"mouseleave\", onLeave);\n      window.addEventListener(\"blur\", onBlur);\n      program.uniforms.uUseBaseWobble.value = 0;\n    } else if (animationType === \"3drotate\") {\n      program.uniforms.uUseBaseWobble.value = 0;\n    } else {\n      program.uniforms.uUseBaseWobble.value = 1;\n    }\n    const render = t => {\n      const time = (t - t0) * 0.001;\n      program.uniforms.iTime.value = time;\n      let continueRAF = true;\n      if (animationType === \"hover\") {\n        const maxPitch = 0.6 * HOVSTR;\n        const maxYaw = 0.6 * HOVSTR;\n        targetYaw = (pointer.inside ? -pointer.x : 0) * maxYaw;\n        targetPitch = (pointer.inside ? pointer.y : 0) * maxPitch;\n        const prevYaw = yaw;\n        const prevPitch = pitch;\n        const prevRoll = roll;\n        yaw = lerp(prevYaw, targetYaw, INERT);\n        pitch = lerp(prevPitch, targetPitch, INERT);\n        roll = lerp(prevRoll, 0, 0.1);\n        program.uniforms.uRot.value = setMat3FromEuler(yaw, pitch, roll, rotBuf);\n        if (NOISE_IS_ZERO) {\n          const settled = Math.abs(yaw - targetYaw) < 1e-4 && Math.abs(pitch - targetPitch) < 1e-4 && Math.abs(roll) < 1e-4;\n          if (settled) continueRAF = false;\n        }\n      } else if (animationType === \"3drotate\") {\n        const tScaled = time * TS;\n        yaw = tScaled * wY;\n        pitch = Math.sin(tScaled * wX + phX) * 0.6;\n        roll = Math.sin(tScaled * wZ + phZ) * 0.5;\n        program.uniforms.uRot.value = setMat3FromEuler(yaw, pitch, roll, rotBuf);\n        if (TS < 1e-6) continueRAF = false;\n      } else {\n        rotBuf[0] = 1;\n        rotBuf[1] = 0;\n        rotBuf[2] = 0;\n        rotBuf[3] = 0;\n        rotBuf[4] = 1;\n        rotBuf[5] = 0;\n        rotBuf[6] = 0;\n        rotBuf[7] = 0;\n        rotBuf[8] = 1;\n        program.uniforms.uRot.value = rotBuf;\n        if (TS < 1e-6) continueRAF = false;\n      }\n      renderer.render({\n        scene: mesh\n      });\n      if (continueRAF) {\n        raf = requestAnimationFrame(render);\n      } else {\n        raf = 0;\n      }\n    };\n    if (suspendWhenOffscreen) {\n      const io = new IntersectionObserver(entries => {\n        const vis = entries.some(e => e.isIntersecting);\n        if (vis) startRAF();else stopRAF();\n      });\n      io.observe(container);\n      startRAF();\n      container.__prismIO = io;\n    } else {\n      startRAF();\n    }\n    return () => {\n      stopRAF();\n      ro.disconnect();\n      if (animationType === \"hover\") {\n        if (onPointerMove) window.removeEventListener(\"pointermove\", onPointerMove);\n        window.removeEventListener(\"mouseleave\", onLeave);\n        window.removeEventListener(\"blur\", onBlur);\n      }\n      if (suspendWhenOffscreen) {\n        const io = container.__prismIO;\n        if (io) io.disconnect();\n        delete container.__prismIO;\n      }\n      if (gl.canvas.parentElement === container) container.removeChild(gl.canvas);\n    };\n  }, [height, baseWidth, animationType, glow, noise, offset === null || offset === void 0 ? void 0 : offset.x, offset === null || offset === void 0 ? void 0 : offset.y, scale, transparent, hueShift, colorFrequency, timeScale, hoverStrength, inertia, bloom, suspendWhenOffscreen]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"prism-container\",\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 456,\n    columnNumber: 10\n  }, this);\n};\n_s(Prism, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = Prism;\nexport default Prism;\nvar _c;\n$RefreshReg$(_c, \"Prism\");","map":{"version":3,"names":["Mesh","Program","Renderer","Triangle","useEffect","useRef","jsxDEV","_jsxDEV","Prism","height","baseWidth","animationType","glow","offset","x","y","noise","transparent","scale","hueShift","colorFrequency","hoverStrength","inertia","bloom","suspendWhenOffscreen","timeScale","_s","containerRef","_offset$x","_offset$y","container","current","H","Math","max","BW","BASE_HALF","GLOW","NOISE","offX","offY","SAT","SCALE","HUE","CFREQ","BLOOM","RSX","RSY","RSZ","TS","HOVSTR","INERT","min","dpr","window","devicePixelRatio","renderer","alpha","antialias","gl","disable","DEPTH_TEST","CULL_FACE","BLEND","Object","assign","canvas","style","position","inset","width","display","appendChild","vertex","fragment","geometry","iResBuf","Float32Array","offsetPxBuf","program","uniforms","iResolution","value","iTime","uHeight","uBaseHalf","uUseBaseWobble","uRot","uGlow","uOffsetPx","uNoise","uSaturation","uScale","uHueShift","uColorFreq","uBloom","uCenterShift","uInvBaseHalf","uInvHeight","uMinAxis","uPxScale","drawingBufferHeight","uTimeScale","mesh","resize","w","clientWidth","h","clientHeight","setSize","drawingBufferWidth","ro","ResizeObserver","observe","rotBuf","setMat3FromEuler","yawY","pitchX","rollZ","out","cy","cos","sy","sin","cx","sx","cz","sz","r00","r01","r02","r10","r11","r12","r20","r21","r22","NOISE_IS_ZERO","raf","t0","performance","now","startRAF","requestAnimationFrame","render","stopRAF","cancelAnimationFrame","rnd","random","wX","wY","wZ","phX","PI","phZ","yaw","pitch","roll","targetYaw","targetPitch","lerp","a","b","t","pointer","inside","onMove","e","ww","innerWidth","wh","innerHeight","nx","clientX","ny","clientY","onLeave","onBlur","onPointerMove","addEventListener","passive","time","continueRAF","maxPitch","maxYaw","prevYaw","prevPitch","prevRoll","settled","abs","tScaled","scene","io","IntersectionObserver","entries","vis","some","isIntersecting","__prismIO","disconnect","removeEventListener","parentElement","removeChild","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/devulapellykushalkumarreddy/Downloads/CHALYATI/car-rental-frontend/src/components/Prism.js"],"sourcesContent":["import { Mesh, Program, Renderer, Triangle } from \"ogl\";\nimport { useEffect, useRef } from \"react\";\nimport \"./Prism.css\";\n\nconst Prism = ({\n  height = 3.5,\n  baseWidth = 5.5,\n  animationType = \"rotate\",\n  glow = 1,\n  offset = { x: 0, y: 0 },\n  noise = 0.5,\n  transparent = true,\n  scale = 3.6,\n  hueShift = 0,\n  colorFrequency = 1,\n  hoverStrength = 2,\n  inertia = 0.05,\n  bloom = 1,\n  suspendWhenOffscreen = false,\n  timeScale = 0.5,\n}) => {\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    const H = Math.max(0.001, height);\n    const BW = Math.max(0.001, baseWidth);\n    const BASE_HALF = BW * 0.5;\n    const GLOW = Math.max(0.0, glow);\n    const NOISE = Math.max(0.0, noise);\n    const offX = offset?.x ?? 0;\n    const offY = offset?.y ?? 0;\n    const SAT = transparent ? 1.5 : 1;\n    const SCALE = Math.max(0.001, scale);\n    const HUE = hueShift || 0;\n    const CFREQ = Math.max(0.0, colorFrequency || 1);\n    const BLOOM = Math.max(0.0, bloom || 1);\n    const RSX = 1;\n    const RSY = 1;\n    const RSZ = 1;\n    const TS = Math.max(0, timeScale || 1);\n    const HOVSTR = Math.max(0, hoverStrength || 1);\n    const INERT = Math.max(0, Math.min(1, inertia || 0.12));\n\n    const dpr = Math.min(2, window.devicePixelRatio || 1);\n    const renderer = new Renderer({\n      dpr,\n      alpha: transparent,\n      antialias: false,\n    });\n    const gl = renderer.gl;\n    gl.disable(gl.DEPTH_TEST);\n    gl.disable(gl.CULL_FACE);\n    gl.disable(gl.BLEND);\n\n    Object.assign(gl.canvas.style, {\n      position: \"absolute\",\n      inset: \"0\",\n      width: \"100%\",\n      height: \"100%\",\n      display: \"block\",\n    });\n    container.appendChild(gl.canvas);\n\n    const vertex = /* glsl */ `\n      attribute vec2 position;\n      void main() {\n        gl_Position = vec4(position, 0.0, 1.0);\n      }\n    `;\n\n    const fragment = /* glsl */ `\n      precision highp float;\n\n      uniform vec2  iResolution;\n      uniform float iTime;\n\n      uniform float uHeight;\n      uniform float uBaseHalf;\n      uniform mat3  uRot;\n      uniform int   uUseBaseWobble;\n      uniform float uGlow;\n      uniform vec2  uOffsetPx;\n      uniform float uNoise;\n      uniform float uSaturation;\n      uniform float uScale;\n      uniform float uHueShift;\n      uniform float uColorFreq;\n      uniform float uBloom;\n      uniform float uCenterShift;\n      uniform float uInvBaseHalf;\n      uniform float uInvHeight;\n      uniform float uMinAxis;\n      uniform float uPxScale;\n      uniform float uTimeScale;\n\n      vec4 tanh4(vec4 x){\n        vec4 e2x = exp(2.0*x);\n        return (e2x - 1.0) / (e2x + 1.0);\n      }\n\n      float rand(vec2 co){\n        return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453123);\n      }\n\n      float sdOctaAnisoInv(vec3 p){\n        vec3 q = vec3(abs(p.x) * uInvBaseHalf, abs(p.y) * uInvHeight, abs(p.z) * uInvBaseHalf);\n        float m = q.x + q.y + q.z - 1.0;\n        return m * uMinAxis * 0.5773502691896258;\n      }\n\n      float sdPyramidUpInv(vec3 p){\n        float oct = sdOctaAnisoInv(p);\n        float halfSpace = -p.y;\n        return max(oct, halfSpace);\n      }\n\n      mat3 hueRotation(float a){\n        float c = cos(a), s = sin(a);\n        mat3 W = mat3(\n          0.299, 0.587, 0.114,\n          0.299, 0.587, 0.114,\n          0.299, 0.587, 0.114\n        );\n        mat3 U = mat3(\n           0.701, -0.587, -0.114,\n          -0.299,  0.413, -0.114,\n          -0.300, -0.588,  0.886\n        );\n        mat3 V = mat3(\n           0.168, -0.331,  0.500,\n           0.328,  0.035, -0.500,\n          -0.497,  0.296,  0.201\n        );\n        return W + U * c + V * s;\n      }\n\n      void main(){\n        vec2 f = (gl_FragCoord.xy - 0.5 * iResolution.xy - uOffsetPx) * uPxScale;\n\n        float z = 5.0;\n        float d = 0.0;\n\n        vec3 p;\n        vec4 o = vec4(0.0);\n\n        float centerShift = uCenterShift;\n        float cf = uColorFreq;\n\n        mat2 wob = mat2(1.0);\n        if (uUseBaseWobble == 1) {\n          float t = iTime * uTimeScale;\n          float c0 = cos(t + 0.0);\n          float c1 = cos(t + 33.0);\n          float c2 = cos(t + 11.0);\n          wob = mat2(c0, c1, c2, c0);\n        }\n\n        const int STEPS = 100;\n        for (int i = 0; i < STEPS; i++) {\n          p = vec3(f, z);\n          p.xz = p.xz * wob;\n          p = uRot * p;\n          vec3 q = p;\n          q.y += centerShift;\n          d = 0.1 + 0.2 * abs(sdPyramidUpInv(q));\n          z -= d;\n          o += (sin((p.y + z) * cf + vec4(0.0, 1.0, 2.0, 3.0)) + 1.0) / d;\n        }\n\n        o = tanh4(o * o * (uGlow * uBloom) / 1e5);\n\n        vec3 col = o.rgb;\n        float n = rand(gl_FragCoord.xy + vec2(iTime));\n        col += (n - 0.5) * uNoise;\n        col = clamp(col, 0.0, 1.0);\n\n        float L = dot(col, vec3(0.2126, 0.7152, 0.0722));\n        col = clamp(mix(vec3(L), col, uSaturation), 0.0, 1.0);\n\n        if(abs(uHueShift) > 0.0001){\n          col = clamp(hueRotation(uHueShift) * col, 0.0, 1.0);\n        }\n\n        gl_FragColor = vec4(col, o.a);\n      }\n    `;\n\n    const geometry = new Triangle(gl);\n    const iResBuf = new Float32Array(2);\n    const offsetPxBuf = new Float32Array(2);\n\n    const program = new Program(gl, {\n      vertex,\n      fragment,\n      uniforms: {\n        iResolution: { value: iResBuf },\n        iTime: { value: 0 },\n        uHeight: { value: H },\n        uBaseHalf: { value: BASE_HALF },\n        uUseBaseWobble: { value: 1 },\n        uRot: { value: new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]) },\n        uGlow: { value: GLOW },\n        uOffsetPx: { value: offsetPxBuf },\n        uNoise: { value: NOISE },\n        uSaturation: { value: SAT },\n        uScale: { value: SCALE },\n        uHueShift: { value: HUE },\n        uColorFreq: { value: CFREQ },\n        uBloom: { value: BLOOM },\n        uCenterShift: { value: H * 0.25 },\n        uInvBaseHalf: { value: 1 / BASE_HALF },\n        uInvHeight: { value: 1 / H },\n        uMinAxis: { value: Math.min(BASE_HALF, H) },\n        uPxScale: {\n          value: 1 / ((gl.drawingBufferHeight || 1) * 0.1 * SCALE),\n        },\n        uTimeScale: { value: TS },\n      },\n    });\n    const mesh = new Mesh(gl, { geometry, program });\n\n    const resize = () => {\n      const w = container.clientWidth || 1;\n      const h = container.clientHeight || 1;\n      renderer.setSize(w, h);\n      iResBuf[0] = gl.drawingBufferWidth;\n      iResBuf[1] = gl.drawingBufferHeight;\n      offsetPxBuf[0] = offX * dpr;\n      offsetPxBuf[1] = offY * dpr;\n      program.uniforms.uPxScale.value =\n        1 / ((gl.drawingBufferHeight || 1) * 0.1 * SCALE);\n    };\n    const ro = new ResizeObserver(resize);\n    ro.observe(container);\n    resize();\n\n    const rotBuf = new Float32Array(9);\n    const setMat3FromEuler = (\n      yawY,\n      pitchX,\n      rollZ,\n      out\n    ) => {\n      const cy = Math.cos(yawY),\n        sy = Math.sin(yawY);\n      const cx = Math.cos(pitchX),\n        sx = Math.sin(pitchX);\n      const cz = Math.cos(rollZ),\n        sz = Math.sin(rollZ);\n      const r00 = cy * cz + sy * sx * sz;\n      const r01 = -cy * sz + sy * sx * cz;\n      const r02 = sy * cx;\n\n      const r10 = cx * sz;\n      const r11 = cx * cz;\n      const r12 = -sx;\n\n      const r20 = -sy * cz + cy * sx * sz;\n      const r21 = sy * sz + cy * sx * cz;\n      const r22 = cy * cx;\n\n      out[0] = r00;\n      out[1] = r10;\n      out[2] = r20;\n      out[3] = r01;\n      out[4] = r11;\n      out[5] = r21;\n      out[6] = r02;\n      out[7] = r12;\n      out[8] = r22;\n      return out;\n    };\n\n    const NOISE_IS_ZERO = NOISE < 1e-6;\n    let raf = 0;\n    const t0 = performance.now();\n    const startRAF = () => {\n      if (raf) return;\n      raf = requestAnimationFrame(render);\n    };\n    const stopRAF = () => {\n      if (!raf) return;\n      cancelAnimationFrame(raf);\n      raf = 0;\n    };\n\n    const rnd = () => Math.random();\n    const wX = (0.3 + rnd() * 0.6) * RSX;\n    const wY = (0.2 + rnd() * 0.7) * RSY;\n    const wZ = (0.1 + rnd() * 0.5) * RSZ;\n    const phX = rnd() * Math.PI * 2;\n    const phZ = rnd() * Math.PI * 2;\n\n    let yaw = 0,\n      pitch = 0,\n      roll = 0;\n    let targetYaw = 0,\n      targetPitch = 0;\n    const lerp = (a, b, t) => a + (b - a) * t;\n\n    const pointer = { x: 0, y: 0, inside: true };\n    const onMove = (e) => {\n      const ww = Math.max(1, window.innerWidth);\n      const wh = Math.max(1, window.innerHeight);\n      const cx = ww * 0.5;\n      const cy = wh * 0.5;\n      const nx = (e.clientX - cx) / (ww * 0.5);\n      const ny = (e.clientY - cy) / (wh * 0.5);\n      pointer.x = Math.max(-1, Math.min(1, nx));\n      pointer.y = Math.max(-1, Math.min(1, ny));\n      pointer.inside = true;\n    };\n    const onLeave = () => {\n      pointer.inside = false;\n    };\n    const onBlur = () => {\n      pointer.inside = false;\n    };\n\n    let onPointerMove = null;\n    if (animationType === \"hover\") {\n      onPointerMove = (e) => {\n        onMove(e);\n        startRAF();\n      };\n      window.addEventListener(\"pointermove\", onPointerMove, { passive: true });\n      window.addEventListener(\"mouseleave\", onLeave);\n      window.addEventListener(\"blur\", onBlur);\n      program.uniforms.uUseBaseWobble.value = 0;\n    } else if (animationType === \"3drotate\") {\n      program.uniforms.uUseBaseWobble.value = 0;\n    } else {\n      program.uniforms.uUseBaseWobble.value = 1;\n    }\n\n    const render = (t) => {\n      const time = (t - t0) * 0.001;\n      program.uniforms.iTime.value = time;\n\n      let continueRAF = true;\n\n      if (animationType === \"hover\") {\n        const maxPitch = 0.6 * HOVSTR;\n        const maxYaw = 0.6 * HOVSTR;\n        targetYaw = (pointer.inside ? -pointer.x : 0) * maxYaw;\n        targetPitch = (pointer.inside ? pointer.y : 0) * maxPitch;\n        const prevYaw = yaw;\n        const prevPitch = pitch;\n        const prevRoll = roll;\n        yaw = lerp(prevYaw, targetYaw, INERT);\n        pitch = lerp(prevPitch, targetPitch, INERT);\n        roll = lerp(prevRoll, 0, 0.1);\n        program.uniforms.uRot.value = setMat3FromEuler(\n          yaw,\n          pitch,\n          roll,\n          rotBuf\n        );\n\n        if (NOISE_IS_ZERO) {\n          const settled =\n            Math.abs(yaw - targetYaw) < 1e-4 &&\n            Math.abs(pitch - targetPitch) < 1e-4 &&\n            Math.abs(roll) < 1e-4;\n          if (settled) continueRAF = false;\n        }\n      } else if (animationType === \"3drotate\") {\n        const tScaled = time * TS;\n        yaw = tScaled * wY;\n        pitch = Math.sin(tScaled * wX + phX) * 0.6;\n        roll = Math.sin(tScaled * wZ + phZ) * 0.5;\n        program.uniforms.uRot.value = setMat3FromEuler(\n          yaw,\n          pitch,\n          roll,\n          rotBuf\n        );\n        if (TS < 1e-6) continueRAF = false;\n      } else {\n        rotBuf[0] = 1;\n        rotBuf[1] = 0;\n        rotBuf[2] = 0;\n        rotBuf[3] = 0;\n        rotBuf[4] = 1;\n        rotBuf[5] = 0;\n        rotBuf[6] = 0;\n        rotBuf[7] = 0;\n        rotBuf[8] = 1;\n        program.uniforms.uRot.value = rotBuf;\n        if (TS < 1e-6) continueRAF = false;\n      }\n\n      renderer.render({ scene: mesh });\n      if (continueRAF) {\n        raf = requestAnimationFrame(render);\n      } else {\n        raf = 0;\n      }\n    };\n\n    if (suspendWhenOffscreen) {\n      const io = new IntersectionObserver((entries) => {\n        const vis = entries.some((e) => e.isIntersecting);\n        if (vis) startRAF();\n        else stopRAF();\n      });\n      io.observe(container);\n      startRAF();\n      container.__prismIO = io;\n    } else {\n      startRAF();\n    }\n\n    return () => {\n      stopRAF();\n      ro.disconnect();\n      if (animationType === \"hover\") {\n        if (onPointerMove)\n          window.removeEventListener(\n            \"pointermove\",\n            onPointerMove\n          );\n        window.removeEventListener(\"mouseleave\", onLeave);\n        window.removeEventListener(\"blur\", onBlur);\n      }\n      if (suspendWhenOffscreen) {\n        const io = container.__prismIO\n        if (io) io.disconnect();\n        delete container.__prismIO;\n      }\n      if (gl.canvas.parentElement === container)\n        container.removeChild(gl.canvas);\n    };\n  }, [\n    height,\n    baseWidth,\n    animationType,\n    glow,\n    noise,\n    offset?.x,\n    offset?.y,\n    scale,\n    transparent,\n    hueShift,\n    colorFrequency,\n    timeScale,\n    hoverStrength,\n    inertia,\n    bloom,\n    suspendWhenOffscreen,\n  ]);\n\n  return <div className=\"prism-container\" ref={containerRef} />;\n};\n\nexport default Prism;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}